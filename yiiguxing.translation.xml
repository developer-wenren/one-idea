<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="851" />
    <option name="newTranslationDialogY" value="450" />
    <histories>
      <item value="     Indicates whether or not this instance should register its information&#10;      with eureka server for discovery by others." />
      <item value="    &#10;      Indicates whether or not this instance should register its information&#10;      with eureka server for discovery by others.&#10;     &#10;      &lt;p&gt;&#10;      In some cases, you do not want your instances to be discovered whereas&#10;      you just want do discover other instances.&#10;      &lt;p&gt;&#10;     &#10;      @return true if this instance should register with eureka, false&#10;              otherwise&#10;     " />
      <item value="Swaps the elements at the specified positions in the specified list. (If the specified positions are equal, invoking this method leaves the list unchanged.)" />
      <item value="      Checks if the lease of a given {@link com.netflix.appinfo.InstanceInfo} has expired or not.&#10;     &#10;      Note that due to renew() doing the 'wrong&quot; thing and setting lastUpdateTimestamp to +duration more than&#10;      what it should be, the expiry will actually be 2  duration. This is a minor bug and should only affect&#10;      instances that ungracefully shutdown. Due to possible wide ranging impact to existing usage, this will&#10;      not be fixed.&#10;     " />
      <item value="         We collect first all expired items, to evict them in random order. For large eviction sets,&#10;         if we do not that, we might wipe out whole apps before self preservation kicks in. By randomizing it,&#10;         the impact should be evenly distributed across all applications.&#10;      " />
      <item value="          compute a compensation time defined as the actual time this task was executed since the prev iteration,&#10;          vs the configured amount of time for execution. This is useful for cases where changes in time (due to&#10;          clock skew or gc for example) causes the actual eviction task to execute later than the desired time&#10;          according to the configured cycle.&#10;         " />
      <item value="         Renewals happen every 30 seconds and for a minute it should be a factor of 2.&#10;" />
      <item value="    &#10;      Mark the service as up. This will only take affect the first time called,&#10;      subsequent calls will be ignored.&#10;     " />
      <item value="      Renew the lease, use renewal duration if it was specified by the&#10;      associated {@link T} during registration, otherwise default duration is&#10;      {@link DEFAULT_DURATION_IN_SECS}." />
      <item value="delta" />
      <item value="del" />
      <item value="d" />
      <item value="Replicates all instance changes to peer eureka nodes except for&#10;      replication traffic to this node." />
      <item value="overridden" />
      <item value="overridden Instance Status Map" />
      <item value="existing Last Dirty Timestamp" />
      <item value="Represents the lease information with Eureka.&#10;Eureka decides to remove the instance out of its view depending on the duration that is set in EurekaInstanceConfig.getLeaseExpirationDurationInSeconds() which is held in this lease. The lease also tracks the last time it was renewed.&#10;Author:&#10;Karthik Ranganathan, Greg Kim" />
      <item value="      Users can override to clean up the environment themselves.&#10;" />
      <item value="         Copy registry from neighboring eureka node&#10;" />
      <item value="get Peer Eureka Nodes" />
      <item value="test" />
      <item value="Default Eureka Server Context" />
      <item value="The maximum number of unacknowledged requests the client will send on a single connection before blocking.&quot; + &quot; Note that if this setting is set to be greater than 1 and there are failed sends, there is a risk of&quot; + &quot; message re-ordering due to retries (i.e., if retries are enabled).&quot;;" />
      <item value="The producer groups together any records that arrive in between request transmissions into a single batched request. &quot; + &quot;Normally this occurs only under load when records arrive faster than they can be sent out. However in some circumstances the client may want to &quot; + &quot;reduce the number of requests even under moderate load. This setting accomplishes this by adding a small amount &quot; + &quot;of artificial delay&amp;mdash;that is, rather than immediately sending out a record the producer will wait for up to &quot; + &quot;the given delay to allow other records to be sent so that the sends can be batched together. This can be thought &quot; + &quot;of as analogous to Nagle's algorithm in TCP. This setting gives the upper bound on the delay for batching: once &quot; + &quot;we get &lt;code&gt;&quot; + BATCH_SIZE_CONFIG + &quot;&lt;code&gt; worth of records for a partition it will be sent immediately regardless of this &quot; + &quot;setting, however if we have fewer than this many bytes accumulated for this partition we will 'linger' for the &quot; + &quot;specified time waiting for more records to show up. This setting defaults to 0 (i.e. no delay). Setting &lt;code&gt;&quot; + LINGER_MS_CONFIG + &quot;=5&lt;code&gt;, &quot; + &quot;for example, would have the effect of reducing the number of requests sent but would add up to 5ms of latency to records sent in the absense of load.&quot;;" />
      <item value="private static final String LINGER_MS_DOC = &quot;The producer groups together any records that arrive in between request transmissions into a single batched request. &quot;" />
      <item value="linger" />
      <item value="LINGER MS CONFIG" />
      <item value="accumulator" />
      <item value="all the bound and bindable properties" />
      <item value="all the bound and bindable properties available" />
      <item value="all the bound and bindable properties available " />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="13" />
        <entry key="ENGLISH" value="12" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1636809545365" />
  </component>
  <component name="Settings">
    <option name="aliTranslateSettings">
      <app-key>
        <option name="appId" value="LTAIaPHR7PFeuKmK" />
      </app-key>
    </option>
    <option name="keepFormat" value="true" />
    <option name="showReplacementActionInContextMenu" value="true" />
    <option name="translator" value="ALI" />
  </component>
</application>